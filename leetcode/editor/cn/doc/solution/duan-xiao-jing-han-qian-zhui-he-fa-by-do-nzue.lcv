题目要求实现一个 NumArray 类，使得该类可以在给定一个整数数组 nums 后，求出数组从索引 i 到 j（i ≤ j）范围内元素的总和，包含 i、j 两点。

非常容易想到简单粗暴的暴力解法，像这样不断扫描两个端点间的元素求和并返回结果：

* 

```
int[] numbers;

public NumArray(int[] nums) {
    numbers = nums;
}

public int sumRange(int i, int j) {
    int sum = 0;
    for (int start=i; start<j+1; start++) {
        sum += numbers[start];
    }
    return sum;
}
```

因为通常简单题不卡运行速度，所以提交后是可以通过的。那么问题就来了，有没有更高效的算法解决呢？我们可以用前缀和：假设我们有一个数组 sum，sum[i] 表示从第一个元素到第i个元素 （下标为i - 1）的总和， 又有sum[j + 1] 表示从第一个元素到第j + 1个元素 （下标为j）的总和， 那么要求 i - j 元素综合只需要 sum[j + 1] - sum[i] 即可。 具体下标可以根据个人想法定义，形式不限但是必须保证正确。

* []

```Java
private int[] sum;

public NumArray(int[] nums) {
    if (nums == null) 
        return;
    sum = new int[nums.length + 1];
    for (int i=0; i<nums.length; i++) {
        sum[i + 1] = sum[i] + nums[i];
    }
}

public int sumRange(int i, int j) {
    return sum[j + 1] - sum[i];
}
```

* []

```python
def __init__(self, nums):
    """
    initialize your data structure here.
    :type nums: List[int]
    """
    self.pre_sum = [0]
    for num in nums: 
        self.pre_sum += self.pre_sum[-1] + num,

def sumRange(self, i, j):
    """
    sum of elements nums[i..j], inclusive.
    :type i: int 
    :type j: int
    :rtype: int 
    """
    return self.pre_sum[j + 1] - self.pre_sum[i]
```

* []

```C++
public:
    NumArray(vector<int> &nums) {
        accu.push_back(0);
        for (int num : nums)
            accu.push_back(accu.back() + num);
    }

    int sumRange(int i, int j) {
        return accu[j + 1] - accu[i];
    }
private:
    vector<int> accu;
```

有帮助的话别忘记点赞关注收藏【三连击】哦
